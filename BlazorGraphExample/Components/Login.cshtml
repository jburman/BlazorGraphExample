@inject AppState state
@inject IAuthService authService

@if (Visible)
{
    if (state.LoginStatus == LoginStatus.LoggedIn)
    {
        <p class="control">
            <button class="button" onclick="@LogoutUser">Logout</button>
        </p>
    }
    else if (state.LoginStatus == LoginStatus.LoggedOut)
    {
        <p class="control">
            <button class="button is-info" onclick="@LoginUser">Login</button>
        </p>
    }
}

@functions {

    [Parameter]
    bool Visible { get; set; } = true;

    async Task LoginUser() {
        await authService.LoginAsync();
    }

    async Task LogoutUser() {
        await authService.LogoutAsync(null);
    }

    protected override async Task OnInitAsync() {
        var response = await authService.LoginAsync();
        var isLoggedIn = !string.IsNullOrEmpty(response.AccessToken);
        var status = isLoggedIn ? LoginStatus.LoggedIn : LoginStatus.LoggedOut;

        state.SetLoggedInAccount(response.Account);
        state.SetLoginStatus(status);
    }
}
