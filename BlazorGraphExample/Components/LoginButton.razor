@inject AppState state
@inject AuthService authService

@if (state.LoginStatus == LoginStatus.LoggedIn)
{
    <p class="control">
        <button class="button" @onclick="@LogoutUser">
            <span class="icon"><i class="oi oi-account-logout"></i></span>
            <span>Logout</span>
        </button>
    </p>
}
else
{
    <p class="control">
        <button class="button is-info" @onclick="@LoginUser">
            <span class="icon"><i class="oi oi-account-login"></i></span>
            <span>Login</span>
        </button>
    </p>
}

@code {

    async Task LoginUser() {
        (GraphTokenResult token, GraphAccount account) = await authService.LoginAsync();
        var isLoggedIn = token.Success;
        var status = isLoggedIn ? LoginStatus.LoggedIn : LoginStatus.LoggedOut;

        state.SetAccountId(account?.AccountId);
        state.SetLoginStatus(status);
    }

    async Task LogoutUser() {
        await authService.LogoutAsync();
        state.SetLoginStatus(LoginStatus.LoggedOut);
        state.SetAccountId(null);
    }
}
