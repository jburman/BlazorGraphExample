@inject AppState state
@inject IGraphService graphService

<div class="card-content">
    <div class="columns">
        <div class="column is-three-quarters-desktop">
            @if (state.InProgress && state.DriveItems == null)
            {
                <Loading Text="Loading OneDrive files..."></Loading>
            }
            else
            {
                @if (state.DriveItems != null)
                {
                    <DrivePath></DrivePath>
                    <nav class="panel">

                        @foreach (var item in state.DriveItems.OrderByDescending(item => item.IsFolder).ThenBy(item => item.Name))
                        {
                            <DriveItem Item="@item"></DriveItem>
                        }
                        <div class="panel-block" visible="ShowPaginator">
                            <Paginator></Paginator>
                        </div>
                        <div class="panel-block">
                            <button class="button is-link is-outlined is-fullwidth @(state.InProgress ? "is-loading" : "")" onclick="@LoadDriveItemsAsync">
                                <i class="oi oi-reload"></i> Reload
                            </button>
                          </div>
                    </nav>
                }
            }
        </div>
    </div>
</div>

@functions {
    bool ShowPaginator = false;


    protected async Task LoadDriveItemsAsync() {
        if (!state.InProgress)
        {
            List<BlazorGraphExample.Services.GraphAPI.DriveItem> items = null;
            try
            {
                state.SetInProgress(true);
                //items = await graphService.GetDriveItemsAtPathAsync(state.Path, state.FireLoadProgressChanged, true);
                var request = new GetDriveItemsRequest(state.Path, state.PageSize);
                var response = await graphService.GetDriveItemsAsync(request);

                if (response != null)
                {
                    items = response.DriveItems;
                    ShowPaginator = !string.IsNullOrEmpty(response.SkipToken);

                    int childCount = await graphService.GetChildItemsCountAsync(state.Path);
                    state.SetPageCount(childCount, request.PageSize);
                }
            }
            finally
            {
                state.SetInProgress(false);
            }
            state.SetDriveItems(items);
        }

    }

    protected override async Task OnInitAsync()
    {
        state.InProgressChanged += StateHasChanged;
        state.DriveItemsChanged += StateHasChanged;
        state.PathChanged += async () => {
            await LoadDriveItemsAsync();
        };

        await LoadDriveItemsAsync();
    }
}
