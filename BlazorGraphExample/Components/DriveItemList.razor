@inject AppState state
@inject IGraphService graphService

<div class="container">
    <div class="columns">
        <div class="column is-three-quarters-desktop">
            @if (state.InProgress && state.DriveItems == null)
            {
                <Loading Text="Loading OneDrive files..."></Loading>
            }
            else
            {
                @if (state.DriveItems != null)
                {
                    var orderedDriveItems = state.DriveItems.OrderByDescending(item => item.IsFolder()).ThenBy(item => item.Name);
                    <DrivePath></DrivePath>
                    <nav class="panel">

                        @foreach (var item in orderedDriveItems)
                        {
                            <DriveItem Item="@item"></DriveItem>
                        }
                        @if (state.HasPages())
                        {
                            <div class="panel-block">
                                <Paginator></Paginator>
                            </div>
                        }
                        <div class="panel-block">
                            <button class="button is-link is-outlined is-fullwidth @(state.InProgress ? "is-loading" : "")" @onclick="@ReloadAsync">
                                <i class="oi oi-reload"></i> Reload
                            </button>
                          </div>
                    </nav>
                }
            }
        </div>
    </div>
</div>

@code {

    protected async Task ReloadAsync()
    {
        await LoadDriveItemsAsync(allowCache: false);
    }

    protected async Task LoadDriveItemsAsync(string skipToken = null, bool allowCache = true)
    {
        if (!state.InProgress)
        {
            List<W8lessLabs.GraphAPI.DriveItem> items = null;
            try
            {
                state.SetInProgress(true);
                var request = new GetDriveItemsRequest(state.Path, state.PageSize, skipToken, allowCache);
                var response = await graphService.GetDriveItemsAsync(state.AccountId, request);

                if (response != null)
                {
                    items = response.DriveItems;

                    bool hasAnotherPage = (response.SkipToken != null);

                    if(state.CurrentPage == 1)
                    {
                        if(hasAnotherPage)
                        {
                            int childCount = await graphService.GetChildItemsCountAsync(state.AccountId, state.Path);
                            state.SetPageCount(childCount, request.PageSize);
                        }
                        else
                            state.SetPageCount(1, request.PageSize);
                    }

                    if (hasAnotherPage)
                        state.SetPageToken(state.CurrentPage, response.SkipToken);
                }
            }
            finally
            {
                state.SetInProgress(false);
            }

            state.SetDriveItems(items);
        }
    }

    protected override async Task OnInitAsync()
    {
        state.InProgressChanged += StateHasChanged;
        state.DriveItemsChanged += StateHasChanged;
        state.PathChanged += async () => await LoadDriveItemsAsync();
        state.CurrentPageChanged += async pageChanged =>
        {
            (int oldPage, int newPage) = pageChanged;
            string skipToken = null;
            if(newPage > 1)
                state.TryGetPageToken(newPage - 1, out skipToken);
            await LoadDriveItemsAsync(skipToken);
        };

        await LoadDriveItemsAsync();
    }
}
